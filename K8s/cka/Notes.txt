Kubernetes Architecture:
========================
Kubernetes: is a container orchestration tool that automates the deployment, scaling, and management of containerized applications. It is an open-source platform that is used to manage containerized applications across multiple hosts. It is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.
================================================================================================================================
ETCD: is a distributed key-value store that provides a reliable way to store data across a cluster of machines. It’s open source and available on GitHub. It’s written in Go and uses the Raft consensus algorithm to manage a highly-available replicated log. It is used by Kubernetes as a backing store for all cluster data.
# "داتابيز متخزن فيها كل الداتا الخاصة بالكلاستر بتاعي"
================================================================================================================================
Kube-Scheduler: is a Kubernetes component that watches newly created pods that have no node assigned, and selects a node for them to run on. The scheduler is responsible for making sure that the pods running on each node have the resources they need, and that the nodes themselves have the resources to run all of the pods scheduled to run on them.
# "هو اللي بيحدد البودز بتاعتي هيتعملها أسكاديوال علي أي ماشين من الوركر نودز اللي متوفرة"
# "الماشينز دي كلهااللي هي الوركر نودز بتتسمي كلاستر"
================================================================================================================================
Kube-api-server: is a component on the master node that exposes the Kubernetes API. 
The API server is the front end for the Kubernetes control plane. 
The API server is the only Kubernetes component that talks directly to the storage layer.
"هو اللي بيتصل بالداتابيز وبيعمل الكومندز اللي بتعملها الكونسول"
# "ده اللي أنا بيديله الكومندز بتاعتي وهو ينفذها"
# "أي ريكوست بعمله علي الكونسول هو اللي بينفذه"
================================================================================================================================
Kublet: is an agent that runs on each node in the cluster. It makes sure that containers are running in a pod. 
It is the primary “node agent” that runs on each node. 
The kubelet takes a set of PodSpecs that are provided through various mechanisms (primarily through the apiserver) and ensures that the containers described in those PodSpecs are running and healthy. 
The kubelet doesn’t manage containers which were not created by Kubernetes.
# "ده الأجينت بتاع كوبرنيتس علي كل نود موجودة في الكلاستر"
# "ده زي مدير النود بتاعتي هو اللي بيقوم البودز وهو اللي بيوقفهاوهو اللي بيبعت الداتا لل أبي سيرفر عشان يروح يخزنها في ال اي اتس دي"
================================================================================================================================
Controller-manager: is a daemon that embeds the core control loops shipped with Kubernetes. In applications of robotics and automation, a control loop is a non-terminating loop that regulates the state of the system. In Kubernetes, a controller is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state. 
Examples of controllers that ship with Kubernetes today are the replication controller, endpoints controller, namespace controller, and service account & token controllers.
# "جواه كونترولرز كتير كل واحد منهم بيعمل مهمة معينة زي مثلا النود كنترولر ودي المسؤلة انها تكنترول النودز عندي ودي"
================================================================================================================================
Kube-proxy: is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept. kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.
# "هو اللي بيعمل النيتورك بتاعت الكلاستر بتاعي"
================================================================================================================================
Pod: is a group of one or more containers, with shared storage/network, and a specification for how to run the containers.
A Pod’s contents are always co-located and co-scheduled, and run in a shared context. 
A Pod models an application-specific “logical host” - it contains one or more application containers which are relatively tightly coupled - in a pre-container world, they would have executed on the same physical or virtual machine.
A Pod is the smallest deployable unit of computing that can be created and managed in Kubernetes.
================================================================================================================================
# <======================= Tools =======================>
kubectl: The Kubernetes command-line tool.
kubectl allows you to run commands against Kubernetes clusters. 
You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.
kind: kind lets you run Kubernetes on your local computer. This tool requires that you have Docker installed and configured.
minikube: Like kind, minikube is a tool that lets you run Kubernetes locally. 
minikube runs a single-node Kubernetes cluster on your personal computer (including Windows, macOS and Linux PCs) so that you can try out Kubernetes, or for daily development work.
kubeadm: You can use the kubeadm tool to create and manage Kubernetes clusters. It performs the actions necessary to get a minimum viable, secure cluster up and running in a user friendly way.
================================================================================================================================
Install Kubernetes:
===================
https://computingforgeeks.com/how-to-install-minikube-on-ubuntu-debian-linux/
===============================================================================================================================
# <======================= minikube Commands =======================>

minikube version ===> To check the version of minikube
minikube start ===> To start the minikube cluster
minikube start --container-runtime cri-o ===> To start the minikube cluster with cri-o runtime instead of docker
minikube stop ===> To stop the minikube cluster
minikube status ===> To check the status of minikube cluster (running or stopped)
minikube addons list ===> To check the addons in the cluster
minikube dashboard ===> To open the dashboard in the browser
minikube ssh ===> To ssh into the minikube cluster
minikube ip ====> to show the cluster ip
===============================================================================================================================
# <======================= Kubectl Commands =======================>
kubectl version ===> To check the version of kubectl
kubectl cluster-info ===> To check the cluster info
===============================================================================================================================
# <======================= Kubectl Pods =======================>
k api-resources
kubectl get pods == Kubectl get po ===> To check the pods in the clusterd
kubectl get pods -n kube-system ===> To check the pods in the kube-system namespace in the cluster
kubectl get pods -o wide ===> To check the pods in the cluster with more details
kubectl describe pod nginx-app ===> To get more info about the pod nginx-app
kubectl get pods -o yaml ===> To get the yaml file of the pods in the cluster
kubectl delete pod nginx-app ===> To delete the pod with name nginx-app
Kubectl edit pod nginx-app ===> To edit the pod nginx-app (you can edit the pod with the editor)
===============================================================================================================================
# <======================= Kubectl Replicaset =======================>
kubectl get replicasets ===> To check the replicasets in the cluster (replicasets are created by deployments)
kubectl scale replicaset nginx-app --replicas=5 ===> To scale the replicaset nginx-app to 5 replicas 
kubectl scale --replicas=5 -f nginx-deployment.yaml ===> To scale the replicaset nginx-app to 5 replicas with the yaml file
kubectl delete replicaset nginx-app ===> To delete the replicaset nginx-app
===============================================================================================================================
# <======================= Kubectl Deployment =======================>
Deployment Strategies in Kubernetes:
====================================
Rolling Update: is a deployment strategy that replaces old pods with new ones. 
It is the default strategy used by kubectl apply and kubectl set image commands. 
It is also the default strategy used by Deployment objects.
Recreate: is a deployment strategy that deletes old pods before creating new ones. 
It is the default strategy used by kubectl run command.
===============================================================================================================================
kubectl run nginx-app --image=nginx --port=80 ===> To create a deployment with name nginx-app and image nginx and port 80
kubectl create deployment nginx-app --image=nginx ===> To create a deployment with name nginx-app and image nginx
kubectl get deployments ===> To check the deployments in the cluster
kubectl delete deployment nginx-app ===> To delete the deployment with name nginx-app
kubectl scale deployment nginx-app --replicas=3 ===> To scale the deployment nginx-app to 3 replicas
kubectl describe pdeployment nginx-app ===> To get more info about the deployment nginx-app
kubectl create -f nginx-deployment.yaml ===> To create a deployment with the yaml file nginx-deployment.yaml (Old Command)
kubectl apply -f nginx-deployment.yaml ===> To create or update a deployment with the yaml file nginx-deployment.yaml (New Command)
===============================================================================================================================
# <======================= Docker CMD and ENTRYPOINT Revision =======================>
CMD: is the default command that will be executed when you run the container. 
You can override the CMD command when you run the container.
ENTRYPOINT: is the command that will be executed when you run the container. 
You can't override the ENTRYPOINT command when you run the container. (by Default)
by default the ENTRYPOINT is /bin/sh -c
# ===============================================================================================================================
# <======================= Docker CMD and ENTRYPOINT Examples =======================>
let say we have a docker image with the following Dockerfile:
FROM ubuntu
entrypoint: ["echo", "Hello World"]

If we run the container with the following command: 
docker run ubuntu ===> The output will be: Hello World
# <======================= Docker CMD Override =======================>
let say we have a docker image with the following Dockerfile:
FROM ubuntu
entrypoint: ["echo"]
CMD ["Hello World"]

if we run the container with the following command:
docker run ubuntu ===> The output will be: Hello World it will run the entrypoint command "echo" and concatenate it with the CMD command "Hello World" so the output will be "echo Hello World"

if we want to override the message "Hello World" with another message like "Hello Docker", we can run the container with the following command:
docker run ubuntu "Hello Docker" ===> The output will be: "Hello Docker" because it will run the entrypoint command "echo" and concatenate it with the CMD command "Hello Docker" after overriding the CMD command so the output will be "echo Hello Docker"

so we could override the CMD command when we run the container. 
and accually, the CMD command here is arrgument to the entrypoint command.
but what if we want to override the entrypoint command?
# <======================= Docker ENTRYPOINT Override =======================>
let say we have a docker image with the following Dockerfile:
FROM ubuntu
entrypoint: ["echo"]
CMD ["Hello World"]

and we want to override the entrypoint command with another command like "ls", we can run the container with the following command:
docker run --entrypoint ls ubuntu ===> The output will be: "ls" because it will run the entrypoint command "ls" and concatenate it with the CMD command "Hello World" after overriding the entrypoint command so the output will be "ls Hello World"

if we want to override the entrypoint command and the CMD command, we can run the container with the following command:
docker run --entrypoint ls ubuntu -l ===> The output will be: "ls -l" because it will run the entrypoint command "ls" and concatenate it with the CMD command "-l" after overriding the entrypoint command so the output will be "ls -l"
# ===============================================================================================================================
if we have a docker image and when we run a container from this image we pass an argument to the container, the argument will be passed to the CMD command.
===============================================================================================================================
# <======================= Kubernates Namespace =======================>
namespace: is a virtual environment that is used to isolate the resources in the cluster and every namespace is isolated from the other namespaces.
# ===============================================================================================================================
kubectl get namespaces = kubectl get ns ===> To check the namespaces in the cluster
kubectl get pods -n dev ===> To check the pods in the namespace dev
kubectl create namespace dev ===> To create a namespace with name dev
kubectl delete namespace dev ===> To delete the namespace with name dev
kubectl config set-context --current --namespace=dev ===> To set the namespace dev as the default namespace
===============================================================================================================================
# <======================= Kubernetes Nodes =======================>
kubectl get nodes ===> To get the nodes in the cluster (minikube cluster has only one node)
# <======================= Taints Node =======================>
taints: is a label that is used to mark a "node" as unschedulable (the pods can't be scheduled on this node) and the taints is used to prevent the pods from being scheduled on the node.
tolerations: is a label that is used to mark a "pod" as schedulable (the pod can be scheduled on this node) and the tolerations is used to allow the pod to be scheduled on the node.
===============================================================================================================================
taing-effect may be: NoSchedule, PreferNoSchedule or NoExecute
===============================================================================================================================
NoSchedule: means that the pods can't be scheduled on the node with the taint but the old pods that are already scheduled on the node with the taint will be kept on the node but the new pods can't be scheduled on the node with the taint.
PreferNoSchedule: means that the pods can be scheduled on the node with the taint but it's not recommended.
NoExecute: means that the new pods can't be scheduled on the node with the taint even the old pods that are already scheduled on the node with the taint will be deleted from the node.
===============================================================================================================================
Taints-Node:
==============
kubectl taint nodes node-name key=value:taint-effect ===> To add a taint to the node
Example:
==========
kubectl taint nodes node1 app=blue:NoSchedule ===> To add a taint to the node with name node1 with key app and value blue and taint effect NoSchedule
===============================================================================================================================
# <======================= Label Nodes =======================>
# kubectl label nodes node-name key=value ===> To add a label to the node with name node-name
Example:
==========
kubectl label nodes node1 size=large ===> To add a label to the node with name node1 with key size and value large
===============================================================================================================================
# <======================= Node Affinity =======================>
node affinity: is a set of rules that define how a pod is scheduled on a node
the node affinity type can be:
requiredDuringSchedulingIgnoredDuringExecution
                      OR 
preferredDuringSchedulingIgnoredDuringExecution

requiredDuringSchedulingIgnoredDuringExecution: means that the pod will be scheduled on a node that matches the affinity rules
preferredDuringSchedulingIgnoredDuringExecution: means that the pod will be scheduled on a node that matches the affinity rules, but if no node matches the rules, the pod will be scheduled on any node
===============================================================================================================================
# <======================= Node taints vs Node affinity =======================>
node taints: is a label that is used to mark a "node" as unschedulable (the pods can't be scheduled on this node) and the taints is used to prevent the pods from being scheduled on the "specific node".
node affinity: is a set of rules that define how a pod is scheduled on "any node that matches the affinity rules".
=============================================================================================================================== 
# <======================= Kubernetes Services =======================>
service types:
1- NodePort: is a service type that is used to expose the pod to the outside world and it's used to expose the pod to the outside world by using the node ip and the node port.
Node port have 3 ports:
========================
1- target port: is the port that is used by the "pod" to listen to the requests.
2- port: is the port that is used by the "service" to listen to the requests.
3- node port: is the port that is used by the "node" to listen to the requests.
===============================================================================================================================
2- ClusterIP: is a service type that is used to expose the pod to the inside pods in the cluster
ClusterIP have 2 ports:
========================
1- target port: is the port that is used by the "pod" to listen to the requests.
2- port: is the port that is used by the "service" to listen to the requests.
===============================================================================================================================
3- LoadBalancer: is a service type that is used to expose the pod to the outside world and it's used to expose the pod to the outside world by using the load balancer ip and the load balancer port.
LoadBalancer have 2 ports:
===========================
1- target port: is the port that is used by the "pod" to listen to the requests.
2- port: is the port that is used by the "service" to listen to the requests.
===============================================================================================================================


# kube-system ===> this namespace is used by kubernetes to store the pods that are used by kubernetes to run the cluster
===============================================================================================================================
# ===============================================================================================================================
# kubectl get services ===> To check the services in the cluster
# kubectl get all ===> To check all the resources in the cluster (deployments, pods, services, etc)
# kubectl api-resources ===> To check the api resources that we can use with kubectl
# kubectl get nodes ===> To check the nodes in the cluster (minikube cluster has only one node)

# ===============================================================================================================================
# kubectl watch get all ===> To watch the changes in the cluster
 kubectl watch get pod ===> To watch the changes in the pods in the cluster
===============================================================================================================================
# <======================= Readiness Probes =======================>
Pod Conditions:
===============
1- PodScheduled: the pod is scheduled on a node
2- Initialized: the pod is initialized
3- ContainersReady: the containers in the pod are ready to serve the requests
4- Ready: the pod is ready to serve the requests
===============================================================================================================================
Pod life cycle:
===============
1- Pending: the pod is waiting to be scheduled on a node
2- Running: the pod is running on a node
3- Succeeded: the pod is terminated successfully
4- Failed: the pod is terminated with an error
5- Unknown: the pod is in an unknown state
===============================================================================================================================
Pod status:
===========
1- Running: the pod is running on a node
2- Terminating: the pod is terminating
3- Terminated: the pod is terminated
===============================================================================================================================
Common Probe Prameters:
=======================
1- initialDelaySeconds: the time that the pod will wait before starting the probe (default value is 0)
2- periodSeconds: the time that the pod will wait before starting the next probe (default value is 10)
3- timeoutSeconds: the time that the pod will wait before the probe is considered as failed (default value is 1)
4- successThreshold: the number of times that the probe should be successful before the pod is considered as ready (default value is 1)
5- failureThreshold: the number of times that the probe should be failed before the pod is considered as not ready (default value is 3)
===============================================================================================================================
Readiness Probe: is a probe that is used to check if the pod is ready to serve the requests or not 
================
1- exec: is a probe that is used to check if the pod is ready to serve the requests by executing a command in the pod
2- httpGet: is a probe that is used to check if the pod is ready to serve the requests by sending an http request to the pod
3- tcpSocket: is a probe that is used to check if the pod is ready to serve the requests by sending a tcp request to the pod
===============================================================================================================================
# <======================= Liveness Probes =======================>
Liveness Probe: is a probe that is used to check if the pod is alive or not (if the pod is still running or not)
================
1- exec: is a probe that is used to check if the pod is alive or not by executing a command in the pod
2- httpGet: is a probe that is used to check if the pod is alive or not by sending an http request to the pod
3- tcpSocket: is a probe that is used to check if the pod is alive or not by sending a tcp request to the pod
===============================================================================================================================
# <======================= Static Pods =======================>
Static Pods: is a pod that is created by the kubelet and it's not created by the kubernetes api server and it's created by the kubelet and it's stored in the /etc/kubernetes/manifests directory.
===============================================================================================================================
any pod that is created by the kubelet and it's not created by the kubernetes api server is called a static pod
===============================================================================================================================
any yaml file that is stored in the /etc/kubernetes/manifests directory is called a static pod manifest file and it's used to create a static pod by the kubelet
===============================================================================================================================
# <======================= Daemon Sets =======================>
Daemon Set: is a resource that is used to create a pod on every node in the cluster
===============================================================================================================================
kube-prxy is example of a daemon set because it's exists on every node in the cluster
===============================================================================================================================
# <======================= init containers =======================>
init containers: is a container that is used to initialize the pod before the main containers are started
===============================================================================================================================
Example:
========
1- init container: is used to download the code from the git repository run before the main container is started
2- main container: is used to run the code that is downloaded by the init container
===============================================================================================================================

