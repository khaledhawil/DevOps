In Kubernetes  a secret is an object that stores sensitive data, such as passwords, API keys, and TLS certificates. 
Secrets allow you to separate sensitive information from your application code and configuration, 
which can help enhance security and simplify management.

================================================================== How to use it =======================================================================================

$ kubectl create secret generic my-app-secret --from-literal=username=my-username --from-literal=password=my-password -n my-app-namespace # that create two env and in my-app-namespace ns
This will create a Secret called my-app-secret in the my-app-namespace namespace, containing the username and password specified as literal values.


Modify your Deployment to use the Secret. For example, you can add the following env section to your Deployment's container definition:

containers:
  - name: my-app-container
    image: my-app-image:v1
    ports:
      - containerPort: 8080
    env:
      - name: APP_PORT
        valueFrom:
          configMapKeyRef:
            name: my-app-config
            key: APP_PORT
      - name: USERNAME
        valueFrom:
          secretKeyRef:
            name: my-app-secret
            key: username
      - name: PASSWORD
        valueFrom:
          secretKeyRef:
            name: my-app-secret
            key: password


This will add two env 'USERNAME' , 'PASSWORD'  to the containe
$ kubectl apply -f my-app.yaml

$ kubectl logs <pod-name> -n my-app-namespace

$ echo "HOSTNAME" | base64  # this will Encrypted the value
$ echo "SE9TVE5BTUUK" | base64  --decode # this will uncode the encryption 


stdin.





