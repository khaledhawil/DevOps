
- A Service Account is:
 an identity that is used by processes within a Kubernetes cluster to interact with the Kubernetes API server and access cluster resources. 
 It allows applications running inside the cluster to authenticate and authorize themselves when making requests to the API server.



 - Service Accounts are created and managed by Kubernetes  and are associated with specific namespaces within the cluster. 
 Each Service Account is assigned a unique name and a corresponding token that is used for authentication. 
 When a process or application running in a pod needs to interact with the Kubernetes API, it can use the Service Account's token to authenticate itself.

- Service Accounts provide a way to control access and permissions within the Kubernetes cluster. 
 They can be granted specific roles and permissions using Kubernetes' RBAC (Role-Based Access Control) system. 
 This allows fine-grained control over what actions a Service Account can perform within the cluster.



# Overall, Service Accounts play a crucial role in securing and managing access to the Kubernetes cluster's resources and API.


- To create a sa :
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: my-service-account

  
  
- Use the Service Account in a Pod: 
To make use of the Service Account within a pod, you need to specify the Service Account name in the pod's YAML definition. Here's an example:

# apiVersion: v1
# kind: Pod
# metadata:
#   name: my-pod
# spec:
#   serviceAccountName: my-service-account
#   containers:
#     - name: my-container
#       image: my-image



