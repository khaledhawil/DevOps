

*  Docker Volumes:
- volumes are used to persist data generated by a container, even after the container is deleted or recreated. 
- Volumes can be created and managed using the docker volume command, or they can be defined in a docker-compose.yml file.

to create a volume:
$ docker volume create vol-name

To list all volumes :
$ docker volume ls

Inspecting a Volume: 

$ docker volume inspect my-volume


Removing a Volume : 

$ docker volume rm my-volume

Mounting a Volume to a Container:
$ docker run -v my-volume:/path/in/container my-image





* Docker Networks: 

- Docker networks are used to enable communication between containers running on the same host or across multiple hosts. 
- Networks can be created and managed using the docker network command, or they can be defined in a docker-compose.yml file.


By default, Docker creates a bridge network for containers to communicate with each other. 
- You can change the default network by creating a new network and setting it as the default:

To create your custom network:

$ docker network create --driver bridge --subnet 172.18.0.0/16 my-network

to put it in docker-compose
# networks:
#   my-network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.18.0.0/16

To create a docker network :

$ docker network create my-network

To remove a network: 

$ docker network rm my-network



To list all network:
$ docker network ls

To inspect of a specific network:

$ docker network inspect my-network


To connect a container to a network:

$ docker run --network my-network my-image

To disconnect a container from a network:

$ docker network disconnect my-network my-container

To check the IP address of a container on a network:

$ docker network inspect my-network | grep IPAddress 


to check the IP address
$ docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-container


















